// Code generated by go-queryset. DO NOT EDIT.
package model

import (
	"errors"
	"fmt"
	"time"

	"github.com/jinzhu/gorm"
	"github.com/nange/gospider/common"
)

// ===== BEGIN of all query sets

// ===== BEGIN of query set TaskQuerySet

// TaskQuerySet is an queryset type for Task
type TaskQuerySet struct {
	db *gorm.DB
}

// NewTaskQuerySet constructs new TaskQuerySet
func NewTaskQuerySet(db *gorm.DB) TaskQuerySet {
	return TaskQuerySet{
		db: db.Model(&Task{}),
	}
}

func (qs TaskQuerySet) w(db *gorm.DB) TaskQuerySet {
	return NewTaskQuerySet(db)
}

// All is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) All(ret *[]Task) error {
	return qs.db.Find(ret).Error
}

// AutoMigrateEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) AutoMigrateEq(autoMigrate bool) TaskQuerySet {
	return qs.w(qs.db.Where("auto_migrate = ?", autoMigrate))
}

// AutoMigrateIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) AutoMigrateIn(autoMigrate ...bool) TaskQuerySet {
	if len(autoMigrate) == 0 {
		qs.db.AddError(errors.New("must at least pass one autoMigrate in AutoMigrateIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("auto_migrate IN (?)", autoMigrate))
}

// AutoMigrateNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) AutoMigrateNe(autoMigrate bool) TaskQuerySet {
	return qs.w(qs.db.Where("auto_migrate != ?", autoMigrate))
}

// AutoMigrateNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) AutoMigrateNotIn(autoMigrate ...bool) TaskQuerySet {
	if len(autoMigrate) == 0 {
		qs.db.AddError(errors.New("must at least pass one autoMigrate in AutoMigrateNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("auto_migrate NOT IN (?)", autoMigrate))
}

// Count is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Count() (int, error) {
	var count int
	err := qs.db.Count(&count).Error
	return count, err
}

// CountsEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsEq(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts = ?", counts))
}

// CountsGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsGt(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts > ?", counts))
}

// CountsGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsGte(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts >= ?", counts))
}

// CountsIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsIn(counts ...int) TaskQuerySet {
	if len(counts) == 0 {
		qs.db.AddError(errors.New("must at least pass one counts in CountsIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("counts IN (?)", counts))
}

// CountsLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsLt(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts < ?", counts))
}

// CountsLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsLte(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts <= ?", counts))
}

// CountsNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsNe(counts int) TaskQuerySet {
	return qs.w(qs.db.Where("counts != ?", counts))
}

// CountsNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CountsNotIn(counts ...int) TaskQuerySet {
	if len(counts) == 0 {
		qs.db.AddError(errors.New("must at least pass one counts in CountsNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("counts NOT IN (?)", counts))
}

// Create is an autogenerated method
// nolint: dupl
func (o *Task) Create(db *gorm.DB) error {
	return db.Create(o).Error
}

// CreatedAtEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtEq(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at = ?", createdAt))
}

// CreatedAtGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtGt(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at > ?", createdAt))
}

// CreatedAtGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtGte(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at >= ?", createdAt))
}

// CreatedAtLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtLt(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at < ?", createdAt))
}

// CreatedAtLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtLte(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at <= ?", createdAt))
}

// CreatedAtNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CreatedAtNe(createdAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("created_at != ?", createdAt))
}

// CronSpecEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecEq(cronSpec string) TaskQuerySet {
	return qs.w(qs.db.Where("cron_spec = ?", cronSpec))
}

// CronSpecIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecIn(cronSpec ...string) TaskQuerySet {
	if len(cronSpec) == 0 {
		qs.db.AddError(errors.New("must at least pass one cronSpec in CronSpecIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cron_spec IN (?)", cronSpec))
}

// CronSpecNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecNe(cronSpec string) TaskQuerySet {
	return qs.w(qs.db.Where("cron_spec != ?", cronSpec))
}

// CronSpecNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) CronSpecNotIn(cronSpec ...string) TaskQuerySet {
	if len(cronSpec) == 0 {
		qs.db.AddError(errors.New("must at least pass one cronSpec in CronSpecNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("cron_spec NOT IN (?)", cronSpec))
}

// Delete is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Delete() error {
	return qs.db.Delete(Task{}).Error
}

// Delete is an autogenerated method
// nolint: dupl
func (o *Task) Delete(db *gorm.DB) error {
	return db.Delete(o).Error
}

// DeleteNum is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) DeleteNum() (int64, error) {
	db := qs.db.Delete(Task{})
	return db.RowsAffected, db.Error
}

// DeleteNumUnscoped is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) DeleteNumUnscoped() (int64, error) {
	db := qs.db.Unscoped().Delete(Task{})
	return db.RowsAffected, db.Error
}

// GetUpdater is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) GetUpdater() TaskUpdater {
	return NewTaskUpdater(qs.db)
}

// IDEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDEq(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id = ?", ID))
}

// IDGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDGt(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id > ?", ID))
}

// IDGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDGte(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id >= ?", ID))
}

// IDIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDIn(ID ...uint64) TaskQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id IN (?)", ID))
}

// IDLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDLt(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id < ?", ID))
}

// IDLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDLte(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id <= ?", ID))
}

// IDNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDNe(ID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("id != ?", ID))
}

// IDNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) IDNotIn(ID ...uint64) TaskQuerySet {
	if len(ID) == 0 {
		qs.db.AddError(errors.New("must at least pass one ID in IDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("id NOT IN (?)", ID))
}

// Limit is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Limit(limit int) TaskQuerySet {
	return qs.w(qs.db.Limit(limit))
}

// LimitDelayEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayEq(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay = ?", limitDelay))
}

// LimitDelayGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayGt(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay > ?", limitDelay))
}

// LimitDelayGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayGte(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay >= ?", limitDelay))
}

// LimitDelayIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayIn(limitDelay ...int) TaskQuerySet {
	if len(limitDelay) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDelay in LimitDelayIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_delay IN (?)", limitDelay))
}

// LimitDelayLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayLt(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay < ?", limitDelay))
}

// LimitDelayLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayLte(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay <= ?", limitDelay))
}

// LimitDelayNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayNe(limitDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_delay != ?", limitDelay))
}

// LimitDelayNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDelayNotIn(limitDelay ...int) TaskQuerySet {
	if len(limitDelay) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDelay in LimitDelayNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_delay NOT IN (?)", limitDelay))
}

// LimitDomainGlobEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobEq(limitDomainGlob string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_glob = ?", limitDomainGlob))
}

// LimitDomainGlobIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobIn(limitDomainGlob ...string) TaskQuerySet {
	if len(limitDomainGlob) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDomainGlob in LimitDomainGlobIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_domain_glob IN (?)", limitDomainGlob))
}

// LimitDomainGlobNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobNe(limitDomainGlob string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_glob != ?", limitDomainGlob))
}

// LimitDomainGlobNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainGlobNotIn(limitDomainGlob ...string) TaskQuerySet {
	if len(limitDomainGlob) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDomainGlob in LimitDomainGlobNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_domain_glob NOT IN (?)", limitDomainGlob))
}

// LimitDomainRegexpEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpEq(limitDomainRegexp string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_regexp = ?", limitDomainRegexp))
}

// LimitDomainRegexpIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpIn(limitDomainRegexp ...string) TaskQuerySet {
	if len(limitDomainRegexp) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDomainRegexp in LimitDomainRegexpIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_domain_regexp IN (?)", limitDomainRegexp))
}

// LimitDomainRegexpNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpNe(limitDomainRegexp string) TaskQuerySet {
	return qs.w(qs.db.Where("limit_domain_regexp != ?", limitDomainRegexp))
}

// LimitDomainRegexpNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitDomainRegexpNotIn(limitDomainRegexp ...string) TaskQuerySet {
	if len(limitDomainRegexp) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitDomainRegexp in LimitDomainRegexpNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_domain_regexp NOT IN (?)", limitDomainRegexp))
}

// LimitEnableEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableEq(limitEnable bool) TaskQuerySet {
	return qs.w(qs.db.Where("limit_enable = ?", limitEnable))
}

// LimitEnableIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableIn(limitEnable ...bool) TaskQuerySet {
	if len(limitEnable) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitEnable in LimitEnableIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_enable IN (?)", limitEnable))
}

// LimitEnableNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableNe(limitEnable bool) TaskQuerySet {
	return qs.w(qs.db.Where("limit_enable != ?", limitEnable))
}

// LimitEnableNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitEnableNotIn(limitEnable ...bool) TaskQuerySet {
	if len(limitEnable) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitEnable in LimitEnableNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_enable NOT IN (?)", limitEnable))
}

// LimitParallelismEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismEq(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism = ?", limitParallelism))
}

// LimitParallelismGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismGt(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism > ?", limitParallelism))
}

// LimitParallelismGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismGte(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism >= ?", limitParallelism))
}

// LimitParallelismIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismIn(limitParallelism ...int) TaskQuerySet {
	if len(limitParallelism) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitParallelism in LimitParallelismIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_parallelism IN (?)", limitParallelism))
}

// LimitParallelismLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismLt(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism < ?", limitParallelism))
}

// LimitParallelismLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismLte(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism <= ?", limitParallelism))
}

// LimitParallelismNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismNe(limitParallelism int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_parallelism != ?", limitParallelism))
}

// LimitParallelismNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitParallelismNotIn(limitParallelism ...int) TaskQuerySet {
	if len(limitParallelism) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitParallelism in LimitParallelismNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_parallelism NOT IN (?)", limitParallelism))
}

// LimitRandomDelayEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayEq(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay = ?", limitRandomDelay))
}

// LimitRandomDelayGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayGt(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay > ?", limitRandomDelay))
}

// LimitRandomDelayGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayGte(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay >= ?", limitRandomDelay))
}

// LimitRandomDelayIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayIn(limitRandomDelay ...int) TaskQuerySet {
	if len(limitRandomDelay) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitRandomDelay in LimitRandomDelayIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_random_delay IN (?)", limitRandomDelay))
}

// LimitRandomDelayLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayLt(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay < ?", limitRandomDelay))
}

// LimitRandomDelayLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayLte(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay <= ?", limitRandomDelay))
}

// LimitRandomDelayNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayNe(limitRandomDelay int) TaskQuerySet {
	return qs.w(qs.db.Where("limit_random_delay != ?", limitRandomDelay))
}

// LimitRandomDelayNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) LimitRandomDelayNotIn(limitRandomDelay ...int) TaskQuerySet {
	if len(limitRandomDelay) == 0 {
		qs.db.AddError(errors.New("must at least pass one limitRandomDelay in LimitRandomDelayNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("limit_random_delay NOT IN (?)", limitRandomDelay))
}

// Offset is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) Offset(offset int) TaskQuerySet {
	return qs.w(qs.db.Offset(offset))
}

// One is used to retrieve one result. It returns gorm.ErrRecordNotFound
// if nothing was fetched
func (qs TaskQuerySet) One(ret *Task) error {
	return qs.db.First(ret).Error
}

// OptAllowedDomainsEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsEq(optAllowedDomains string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_allowed_domains = ?", optAllowedDomains))
}

// OptAllowedDomainsIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsIn(optAllowedDomains ...string) TaskQuerySet {
	if len(optAllowedDomains) == 0 {
		qs.db.AddError(errors.New("must at least pass one optAllowedDomains in OptAllowedDomainsIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_allowed_domains IN (?)", optAllowedDomains))
}

// OptAllowedDomainsNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsNe(optAllowedDomains string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_allowed_domains != ?", optAllowedDomains))
}

// OptAllowedDomainsNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptAllowedDomainsNotIn(optAllowedDomains ...string) TaskQuerySet {
	if len(optAllowedDomains) == 0 {
		qs.db.AddError(errors.New("must at least pass one optAllowedDomains in OptAllowedDomainsNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_allowed_domains NOT IN (?)", optAllowedDomains))
}

// OptMaxBodySizeEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeEq(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size = ?", optMaxBodySize))
}

// OptMaxBodySizeGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeGt(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size > ?", optMaxBodySize))
}

// OptMaxBodySizeGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeGte(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size >= ?", optMaxBodySize))
}

// OptMaxBodySizeIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeIn(optMaxBodySize ...int) TaskQuerySet {
	if len(optMaxBodySize) == 0 {
		qs.db.AddError(errors.New("must at least pass one optMaxBodySize in OptMaxBodySizeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_max_body_size IN (?)", optMaxBodySize))
}

// OptMaxBodySizeLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeLt(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size < ?", optMaxBodySize))
}

// OptMaxBodySizeLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeLte(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size <= ?", optMaxBodySize))
}

// OptMaxBodySizeNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeNe(optMaxBodySize int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_body_size != ?", optMaxBodySize))
}

// OptMaxBodySizeNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxBodySizeNotIn(optMaxBodySize ...int) TaskQuerySet {
	if len(optMaxBodySize) == 0 {
		qs.db.AddError(errors.New("must at least pass one optMaxBodySize in OptMaxBodySizeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_max_body_size NOT IN (?)", optMaxBodySize))
}

// OptMaxDepthEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthEq(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth = ?", optMaxDepth))
}

// OptMaxDepthGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthGt(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth > ?", optMaxDepth))
}

// OptMaxDepthGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthGte(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth >= ?", optMaxDepth))
}

// OptMaxDepthIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthIn(optMaxDepth ...int) TaskQuerySet {
	if len(optMaxDepth) == 0 {
		qs.db.AddError(errors.New("must at least pass one optMaxDepth in OptMaxDepthIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_max_depth IN (?)", optMaxDepth))
}

// OptMaxDepthLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthLt(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth < ?", optMaxDepth))
}

// OptMaxDepthLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthLte(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth <= ?", optMaxDepth))
}

// OptMaxDepthNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthNe(optMaxDepth int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_max_depth != ?", optMaxDepth))
}

// OptMaxDepthNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptMaxDepthNotIn(optMaxDepth ...int) TaskQuerySet {
	if len(optMaxDepth) == 0 {
		qs.db.AddError(errors.New("must at least pass one optMaxDepth in OptMaxDepthNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_max_depth NOT IN (?)", optMaxDepth))
}

// OptRequestTimeoutEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutEq(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout = ?", optRequestTimeout))
}

// OptRequestTimeoutGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutGt(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout > ?", optRequestTimeout))
}

// OptRequestTimeoutGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutGte(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout >= ?", optRequestTimeout))
}

// OptRequestTimeoutIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutIn(optRequestTimeout ...int) TaskQuerySet {
	if len(optRequestTimeout) == 0 {
		qs.db.AddError(errors.New("must at least pass one optRequestTimeout in OptRequestTimeoutIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_request_timeout IN (?)", optRequestTimeout))
}

// OptRequestTimeoutLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutLt(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout < ?", optRequestTimeout))
}

// OptRequestTimeoutLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutLte(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout <= ?", optRequestTimeout))
}

// OptRequestTimeoutNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutNe(optRequestTimeout int) TaskQuerySet {
	return qs.w(qs.db.Where("opt_request_timeout != ?", optRequestTimeout))
}

// OptRequestTimeoutNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptRequestTimeoutNotIn(optRequestTimeout ...int) TaskQuerySet {
	if len(optRequestTimeout) == 0 {
		qs.db.AddError(errors.New("must at least pass one optRequestTimeout in OptRequestTimeoutNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_request_timeout NOT IN (?)", optRequestTimeout))
}

// OptURLFiltersEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersEq(optURLFilters string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_url_filters = ?", optURLFilters))
}

// OptURLFiltersIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersIn(optURLFilters ...string) TaskQuerySet {
	if len(optURLFilters) == 0 {
		qs.db.AddError(errors.New("must at least pass one optURLFilters in OptURLFiltersIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_url_filters IN (?)", optURLFilters))
}

// OptURLFiltersNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersNe(optURLFilters string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_url_filters != ?", optURLFilters))
}

// OptURLFiltersNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptURLFiltersNotIn(optURLFilters ...string) TaskQuerySet {
	if len(optURLFilters) == 0 {
		qs.db.AddError(errors.New("must at least pass one optURLFilters in OptURLFiltersNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_url_filters NOT IN (?)", optURLFilters))
}

// OptUserAgentEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentEq(optUserAgent string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_user_agent = ?", optUserAgent))
}

// OptUserAgentIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentIn(optUserAgent ...string) TaskQuerySet {
	if len(optUserAgent) == 0 {
		qs.db.AddError(errors.New("must at least pass one optUserAgent in OptUserAgentIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_user_agent IN (?)", optUserAgent))
}

// OptUserAgentNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentNe(optUserAgent string) TaskQuerySet {
	return qs.w(qs.db.Where("opt_user_agent != ?", optUserAgent))
}

// OptUserAgentNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OptUserAgentNotIn(optUserAgent ...string) TaskQuerySet {
	if len(optUserAgent) == 0 {
		qs.db.AddError(errors.New("must at least pass one optUserAgent in OptUserAgentNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("opt_user_agent NOT IN (?)", optUserAgent))
}

// OrderAscByCounts is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByCounts() TaskQuerySet {
	return qs.w(qs.db.Order("counts ASC"))
}

// OrderAscByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByCreatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("created_at ASC"))
}

// OrderAscByID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByID() TaskQuerySet {
	return qs.w(qs.db.Order("id ASC"))
}

// OrderAscByLimitDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_delay ASC"))
}

// OrderAscByLimitParallelism is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitParallelism() TaskQuerySet {
	return qs.w(qs.db.Order("limit_parallelism ASC"))
}

// OrderAscByLimitRandomDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByLimitRandomDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_random_delay ASC"))
}

// OrderAscByOptMaxBodySize is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOptMaxBodySize() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_body_size ASC"))
}

// OrderAscByOptMaxDepth is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOptMaxDepth() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_depth ASC"))
}

// OrderAscByOptRequestTimeout is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOptRequestTimeout() TaskQuerySet {
	return qs.w(qs.db.Order("opt_request_timeout ASC"))
}

// OrderAscByOutputExportDBID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByOutputExportDBID() TaskQuerySet {
	return qs.w(qs.db.Order("output_exportdb_id ASC"))
}

// OrderAscByStatus is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByStatus() TaskQuerySet {
	return qs.w(qs.db.Order("status ASC"))
}

// OrderAscByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderAscByUpdatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("updated_at ASC"))
}

// OrderDescByCounts is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByCounts() TaskQuerySet {
	return qs.w(qs.db.Order("counts DESC"))
}

// OrderDescByCreatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByCreatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("created_at DESC"))
}

// OrderDescByID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByID() TaskQuerySet {
	return qs.w(qs.db.Order("id DESC"))
}

// OrderDescByLimitDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_delay DESC"))
}

// OrderDescByLimitParallelism is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitParallelism() TaskQuerySet {
	return qs.w(qs.db.Order("limit_parallelism DESC"))
}

// OrderDescByLimitRandomDelay is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByLimitRandomDelay() TaskQuerySet {
	return qs.w(qs.db.Order("limit_random_delay DESC"))
}

// OrderDescByOptMaxBodySize is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOptMaxBodySize() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_body_size DESC"))
}

// OrderDescByOptMaxDepth is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOptMaxDepth() TaskQuerySet {
	return qs.w(qs.db.Order("opt_max_depth DESC"))
}

// OrderDescByOptRequestTimeout is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOptRequestTimeout() TaskQuerySet {
	return qs.w(qs.db.Order("opt_request_timeout DESC"))
}

// OrderDescByOutputExportDBID is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByOutputExportDBID() TaskQuerySet {
	return qs.w(qs.db.Order("output_exportdb_id DESC"))
}

// OrderDescByStatus is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByStatus() TaskQuerySet {
	return qs.w(qs.db.Order("status DESC"))
}

// OrderDescByUpdatedAt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OrderDescByUpdatedAt() TaskQuerySet {
	return qs.w(qs.db.Order("updated_at DESC"))
}

// OutputExportDBIDEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDEq(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id = ?", outputExportDBID))
}

// OutputExportDBIDGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDGt(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id > ?", outputExportDBID))
}

// OutputExportDBIDGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDGte(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id >= ?", outputExportDBID))
}

// OutputExportDBIDIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDIn(outputExportDBID ...uint64) TaskQuerySet {
	if len(outputExportDBID) == 0 {
		qs.db.AddError(errors.New("must at least pass one outputExportDBID in OutputExportDBIDIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("output_exportdb_id IN (?)", outputExportDBID))
}

// OutputExportDBIDLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDLt(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id < ?", outputExportDBID))
}

// OutputExportDBIDLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDLte(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id <= ?", outputExportDBID))
}

// OutputExportDBIDNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDNe(outputExportDBID uint64) TaskQuerySet {
	return qs.w(qs.db.Where("output_exportdb_id != ?", outputExportDBID))
}

// OutputExportDBIDNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputExportDBIDNotIn(outputExportDBID ...uint64) TaskQuerySet {
	if len(outputExportDBID) == 0 {
		qs.db.AddError(errors.New("must at least pass one outputExportDBID in OutputExportDBIDNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("output_exportdb_id NOT IN (?)", outputExportDBID))
}

// OutputTypeEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputTypeEq(outputType string) TaskQuerySet {
	return qs.w(qs.db.Where("output_type = ?", outputType))
}

// OutputTypeIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputTypeIn(outputType ...string) TaskQuerySet {
	if len(outputType) == 0 {
		qs.db.AddError(errors.New("must at least pass one outputType in OutputTypeIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("output_type IN (?)", outputType))
}

// OutputTypeNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputTypeNe(outputType string) TaskQuerySet {
	return qs.w(qs.db.Where("output_type != ?", outputType))
}

// OutputTypeNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) OutputTypeNotIn(outputType ...string) TaskQuerySet {
	if len(outputType) == 0 {
		qs.db.AddError(errors.New("must at least pass one outputType in OutputTypeNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("output_type NOT IN (?)", outputType))
}

// ProxyURLsEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) ProxyURLsEq(proxyURLs string) TaskQuerySet {
	return qs.w(qs.db.Where("proxy_urls = ?", proxyURLs))
}

// ProxyURLsIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) ProxyURLsIn(proxyURLs ...string) TaskQuerySet {
	if len(proxyURLs) == 0 {
		qs.db.AddError(errors.New("must at least pass one proxyURLs in ProxyURLsIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("proxy_urls IN (?)", proxyURLs))
}

// ProxyURLsNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) ProxyURLsNe(proxyURLs string) TaskQuerySet {
	return qs.w(qs.db.Where("proxy_urls != ?", proxyURLs))
}

// ProxyURLsNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) ProxyURLsNotIn(proxyURLs ...string) TaskQuerySet {
	if len(proxyURLs) == 0 {
		qs.db.AddError(errors.New("must at least pass one proxyURLs in ProxyURLsNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("proxy_urls NOT IN (?)", proxyURLs))
}

// SetAutoMigrate is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetAutoMigrate(autoMigrate bool) TaskUpdater {
	u.fields[string(TaskDBSchema.AutoMigrate)] = autoMigrate
	return u
}

// SetCounts is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCounts(counts int) TaskUpdater {
	u.fields[string(TaskDBSchema.Counts)] = counts
	return u
}

// SetCreatedAt is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCreatedAt(createdAt time.Time) TaskUpdater {
	u.fields[string(TaskDBSchema.CreatedAt)] = createdAt
	return u
}

// SetCronSpec is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetCronSpec(cronSpec string) TaskUpdater {
	u.fields[string(TaskDBSchema.CronSpec)] = cronSpec
	return u
}

// SetID is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetID(ID uint64) TaskUpdater {
	u.fields[string(TaskDBSchema.ID)] = ID
	return u
}

// SetLimitDelay is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDelay(limitDelay int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDelay)] = limitDelay
	return u
}

// SetLimitDomainGlob is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDomainGlob(limitDomainGlob string) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDomainGlob)] = limitDomainGlob
	return u
}

// SetLimitDomainRegexp is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitDomainRegexp(limitDomainRegexp string) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitDomainRegexp)] = limitDomainRegexp
	return u
}

// SetLimitEnable is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitEnable(limitEnable bool) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitEnable)] = limitEnable
	return u
}

// SetLimitParallelism is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitParallelism(limitParallelism int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitParallelism)] = limitParallelism
	return u
}

// SetLimitRandomDelay is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetLimitRandomDelay(limitRandomDelay int) TaskUpdater {
	u.fields[string(TaskDBSchema.LimitRandomDelay)] = limitRandomDelay
	return u
}

// SetOptAllowedDomains is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptAllowedDomains(optAllowedDomains string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptAllowedDomains)] = optAllowedDomains
	return u
}

// SetOptMaxBodySize is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptMaxBodySize(optMaxBodySize int) TaskUpdater {
	u.fields[string(TaskDBSchema.OptMaxBodySize)] = optMaxBodySize
	return u
}

// SetOptMaxDepth is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptMaxDepth(optMaxDepth int) TaskUpdater {
	u.fields[string(TaskDBSchema.OptMaxDepth)] = optMaxDepth
	return u
}

// SetOptRequestTimeout is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptRequestTimeout(optRequestTimeout int) TaskUpdater {
	u.fields[string(TaskDBSchema.OptRequestTimeout)] = optRequestTimeout
	return u
}

// SetOptURLFilters is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptURLFilters(optURLFilters string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptURLFilters)] = optURLFilters
	return u
}

// SetOptUserAgent is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOptUserAgent(optUserAgent string) TaskUpdater {
	u.fields[string(TaskDBSchema.OptUserAgent)] = optUserAgent
	return u
}

// SetOutputExportDBID is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOutputExportDBID(outputExportDBID uint64) TaskUpdater {
	u.fields[string(TaskDBSchema.OutputExportDBID)] = outputExportDBID
	return u
}

// SetOutputType is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetOutputType(outputType string) TaskUpdater {
	u.fields[string(TaskDBSchema.OutputType)] = outputType
	return u
}

// SetProxyURLs is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetProxyURLs(proxyURLs string) TaskUpdater {
	u.fields[string(TaskDBSchema.ProxyURLs)] = proxyURLs
	return u
}

// SetStatus is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetStatus(status common.TaskStatus) TaskUpdater {
	u.fields[string(TaskDBSchema.Status)] = status
	return u
}

// SetTaskDesc is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskDesc(taskDesc string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskDesc)] = taskDesc
	return u
}

// SetTaskName is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskName(taskName string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskName)] = taskName
	return u
}

// SetTaskRuleName is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetTaskRuleName(taskRuleName string) TaskUpdater {
	u.fields[string(TaskDBSchema.TaskRuleName)] = taskRuleName
	return u
}

// SetUpdatedAt is an autogenerated method
// nolint: dupl
func (u TaskUpdater) SetUpdatedAt(updatedAt time.Time) TaskUpdater {
	u.fields[string(TaskDBSchema.UpdatedAt)] = updatedAt
	return u
}

// StatusEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusEq(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status = ?", status))
}

// StatusGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusGt(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status > ?", status))
}

// StatusGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusGte(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status >= ?", status))
}

// StatusIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusIn(status ...common.TaskStatus) TaskQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status IN (?)", status))
}

// StatusLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusLt(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status < ?", status))
}

// StatusLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusLte(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status <= ?", status))
}

// StatusNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusNe(status common.TaskStatus) TaskQuerySet {
	return qs.w(qs.db.Where("status != ?", status))
}

// StatusNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) StatusNotIn(status ...common.TaskStatus) TaskQuerySet {
	if len(status) == 0 {
		qs.db.AddError(errors.New("must at least pass one status in StatusNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("status NOT IN (?)", status))
}

// TaskDescEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescEq(taskDesc string) TaskQuerySet {
	return qs.w(qs.db.Where("task_desc = ?", taskDesc))
}

// TaskDescIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescIn(taskDesc ...string) TaskQuerySet {
	if len(taskDesc) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskDesc in TaskDescIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_desc IN (?)", taskDesc))
}

// TaskDescNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescNe(taskDesc string) TaskQuerySet {
	return qs.w(qs.db.Where("task_desc != ?", taskDesc))
}

// TaskDescNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskDescNotIn(taskDesc ...string) TaskQuerySet {
	if len(taskDesc) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskDesc in TaskDescNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_desc NOT IN (?)", taskDesc))
}

// TaskNameEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameEq(taskName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_name = ?", taskName))
}

// TaskNameIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameIn(taskName ...string) TaskQuerySet {
	if len(taskName) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskName in TaskNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_name IN (?)", taskName))
}

// TaskNameNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameNe(taskName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_name != ?", taskName))
}

// TaskNameNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskNameNotIn(taskName ...string) TaskQuerySet {
	if len(taskName) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskName in TaskNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_name NOT IN (?)", taskName))
}

// TaskRuleNameEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameEq(taskRuleName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_rule_name = ?", taskRuleName))
}

// TaskRuleNameIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameIn(taskRuleName ...string) TaskQuerySet {
	if len(taskRuleName) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskRuleName in TaskRuleNameIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_rule_name IN (?)", taskRuleName))
}

// TaskRuleNameNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameNe(taskRuleName string) TaskQuerySet {
	return qs.w(qs.db.Where("task_rule_name != ?", taskRuleName))
}

// TaskRuleNameNotIn is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) TaskRuleNameNotIn(taskRuleName ...string) TaskQuerySet {
	if len(taskRuleName) == 0 {
		qs.db.AddError(errors.New("must at least pass one taskRuleName in TaskRuleNameNotIn"))
		return qs.w(qs.db)
	}
	return qs.w(qs.db.Where("task_rule_name NOT IN (?)", taskRuleName))
}

// Update is an autogenerated method
// nolint: dupl
func (u TaskUpdater) Update() error {
	return u.db.Updates(u.fields).Error
}

// UpdateNum is an autogenerated method
// nolint: dupl
func (u TaskUpdater) UpdateNum() (int64, error) {
	db := u.db.Updates(u.fields)
	return db.RowsAffected, db.Error
}

// UpdatedAtEq is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtEq(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at = ?", updatedAt))
}

// UpdatedAtGt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtGt(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at > ?", updatedAt))
}

// UpdatedAtGte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtGte(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at >= ?", updatedAt))
}

// UpdatedAtLt is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtLt(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at < ?", updatedAt))
}

// UpdatedAtLte is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtLte(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at <= ?", updatedAt))
}

// UpdatedAtNe is an autogenerated method
// nolint: dupl
func (qs TaskQuerySet) UpdatedAtNe(updatedAt time.Time) TaskQuerySet {
	return qs.w(qs.db.Where("updated_at != ?", updatedAt))
}

// ===== END of query set TaskQuerySet

// ===== BEGIN of Task modifiers

// TaskDBSchemaField describes database schema field. It requires for method 'Update'
type TaskDBSchemaField string

// String method returns string representation of field.
// nolint: dupl
func (f TaskDBSchemaField) String() string {
	return string(f)
}

// TaskDBSchema stores db field names of Task
var TaskDBSchema = struct {
	ID                TaskDBSchemaField
	TaskName          TaskDBSchemaField
	TaskRuleName      TaskDBSchemaField
	TaskDesc          TaskDBSchemaField
	Status            TaskDBSchemaField
	Counts            TaskDBSchemaField
	CronSpec          TaskDBSchemaField
	OutputType        TaskDBSchemaField
	OutputExportDBID  TaskDBSchemaField
	OptUserAgent      TaskDBSchemaField
	OptMaxDepth       TaskDBSchemaField
	OptAllowedDomains TaskDBSchemaField
	OptURLFilters     TaskDBSchemaField
	OptMaxBodySize    TaskDBSchemaField
	OptRequestTimeout TaskDBSchemaField
	AutoMigrate       TaskDBSchemaField
	LimitEnable       TaskDBSchemaField
	LimitDomainRegexp TaskDBSchemaField
	LimitDomainGlob   TaskDBSchemaField
	LimitDelay        TaskDBSchemaField
	LimitRandomDelay  TaskDBSchemaField
	LimitParallelism  TaskDBSchemaField
	ProxyURLs         TaskDBSchemaField
	CreatedAt         TaskDBSchemaField
	UpdatedAt         TaskDBSchemaField
}{

	ID:                TaskDBSchemaField("id"),
	TaskName:          TaskDBSchemaField("task_name"),
	TaskRuleName:      TaskDBSchemaField("task_rule_name"),
	TaskDesc:          TaskDBSchemaField("task_desc"),
	Status:            TaskDBSchemaField("status"),
	Counts:            TaskDBSchemaField("counts"),
	CronSpec:          TaskDBSchemaField("cron_spec"),
	OutputType:        TaskDBSchemaField("output_type"),
	OutputExportDBID:  TaskDBSchemaField("output_exportdb_id"),
	OptUserAgent:      TaskDBSchemaField("opt_user_agent"),
	OptMaxDepth:       TaskDBSchemaField("opt_max_depth"),
	OptAllowedDomains: TaskDBSchemaField("opt_allowed_domains"),
	OptURLFilters:     TaskDBSchemaField("opt_url_filters"),
	OptMaxBodySize:    TaskDBSchemaField("opt_max_body_size"),
	OptRequestTimeout: TaskDBSchemaField("opt_request_timeout"),
	AutoMigrate:       TaskDBSchemaField("auto_migrate"),
	LimitEnable:       TaskDBSchemaField("limit_enable"),
	LimitDomainRegexp: TaskDBSchemaField("limit_domain_regexp"),
	LimitDomainGlob:   TaskDBSchemaField("limit_domain_glob"),
	LimitDelay:        TaskDBSchemaField("limit_delay"),
	LimitRandomDelay:  TaskDBSchemaField("limit_random_delay"),
	LimitParallelism:  TaskDBSchemaField("limit_parallelism"),
	ProxyURLs:         TaskDBSchemaField("proxy_urls"),
	CreatedAt:         TaskDBSchemaField("created_at"),
	UpdatedAt:         TaskDBSchemaField("updated_at"),
}

// Update updates Task fields by primary key
// nolint: dupl
func (o *Task) Update(db *gorm.DB, fields ...TaskDBSchemaField) error {
	dbNameToFieldName := map[string]interface{}{
		"id":                  o.ID,
		"task_name":           o.TaskName,
		"task_rule_name":      o.TaskRuleName,
		"task_desc":           o.TaskDesc,
		"status":              o.Status,
		"counts":              o.Counts,
		"cron_spec":           o.CronSpec,
		"output_type":         o.OutputType,
		"output_exportdb_id":  o.OutputExportDBID,
		"opt_user_agent":      o.OptUserAgent,
		"opt_max_depth":       o.OptMaxDepth,
		"opt_allowed_domains": o.OptAllowedDomains,
		"opt_url_filters":     o.OptURLFilters,
		"opt_max_body_size":   o.OptMaxBodySize,
		"opt_request_timeout": o.OptRequestTimeout,
		"auto_migrate":        o.AutoMigrate,
		"limit_enable":        o.LimitEnable,
		"limit_domain_regexp": o.LimitDomainRegexp,
		"limit_domain_glob":   o.LimitDomainGlob,
		"limit_delay":         o.LimitDelay,
		"limit_random_delay":  o.LimitRandomDelay,
		"limit_parallelism":   o.LimitParallelism,
		"proxy_urls":          o.ProxyURLs,
		"created_at":          o.CreatedAt,
		"updated_at":          o.UpdatedAt,
	}
	u := map[string]interface{}{}
	for _, f := range fields {
		fs := f.String()
		u[fs] = dbNameToFieldName[fs]
	}
	if err := db.Model(o).Updates(u).Error; err != nil {
		if err == gorm.ErrRecordNotFound {
			return err
		}

		return fmt.Errorf("can't update Task %v fields %v: %s",
			o, fields, err)
	}

	return nil
}

// TaskUpdater is an Task updates manager
type TaskUpdater struct {
	fields map[string]interface{}
	db     *gorm.DB
}

// NewTaskUpdater creates new Task updater
// nolint: dupl
func NewTaskUpdater(db *gorm.DB) TaskUpdater {
	return TaskUpdater{
		fields: map[string]interface{}{},
		db:     db.Model(&Task{}),
	}
}

// ===== END of Task modifiers

// ===== END of all query sets
